<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 开启Spring MVC注解模式
		        简化配置: 
		  (1)自动注册DefaultAnnotationHandlerMapping对象到spring 容器,
		  (2)自动注册AnnotationMethodHandlerAdapter对象到spring 容器, 
		  (3)提供多种读写支持
			 <1>数据绑定 
			 <2>数字和日期的转换：@NumberFormat,@DateTimeFormat 
			 <3>支持xml,json.(比如ajax返回json格式就要使用到) -->
	<mvc:annotation-driven />

	<!--servlet-mapping
	        配置静态资源默认servlet配置
	 1:加入对静态资源的处理: js, gif, png 
	 2:充许使用"/"做整体映射,否则web.xml中DispatcherServlet的<url-pattern></url-pattern>只
	 能配置成*.do或*.action等-->
	<mvc:default-servlet-handler />
	
	
	<!-- spring mvc 扫描 -->
	<context:component-scan base-package="com">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>


	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
	</bean>
	
	
	<!-- 解决shiro注解无法生效的配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"></bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
	    <property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>

</beans>